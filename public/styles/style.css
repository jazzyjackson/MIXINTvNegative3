html {
  background: lightgray;
}

body {
  margin: 0;
  /*background-color: #eeF;*/

  background-color: white;
  background-image: url("/images/backgrounddot.png");
  background-repeat: repeat;
  background-size:15px;
  box-shadow: 0 0 50px lightblue;

}

*:focus {
  outline: none;
}

.terminal .input {
  display: inline-block;
}

.terminal .promptContainer > span:first-of-type {
  padding-left: 8px;
  border-top: 1px solid black;
  border-bottom: 1px solid black;
  margin-right: 15px;
  position: relative;
}
.terminal .arrow {
  display: inline-block;
  border-top: 1px solid black;
  border-right: 1px solid black;
  width: 11.4px;
  height: 11.4px;
  transform: rotate(45deg);
  position: absolute;
  top: 1.8px;
  right: -6px;
}


.leaf {
   /*color: #fff;*/
   border: 1px solid black;
}

.leaf .entityHeader {
  font-family: monospace;
  border: 1px solid black;
  margin: 0;
  padding: 5px 0 5px 0;
  width: 100%;
  display: inline-block;
  background: white;
  position: absolute;
  top: -2em;
  left: -1px;
  z-index: 1;

}

.removeButton, .editButton, .broadcastButton, .listenButton, .saveButton, .menuButton {
	margin: 3px;
	width: 30px;
  height: 30px;
}
.entityHeader table {
  margin: 0 auto;
  height: 32px;
}
.headerTitle {
  font-size: 1.2em;
  font-weight: bold;
}

.menuButton {
  position: absolute;
  top: 3px;
  left: 2px;
  border: 1px solid black;
  background: radial-gradient(white, white 25%, gray 45%, black 50%, white 52%)
}

.removeButton {
	position: absolute;
  top: 3px;
  right: 2px;
  background-color: black;  
  -webkit-mask: url('../images/exit.svg');
  -webkit-mask-size: cover;
}
.removeButton:hover{
	background-color: red;

}

.broadcastButton {
  margin-left: 5px;
  float: left;
  background-color: green;
  -webkit-mask: url('../images/broadcast.svg');
  -webkit-mask-size: cover;
}
.leaf[broadcast="false"] .broadcastButton{
  background-color: red;
}

.leaf[showMenu="true"] .menu{
  display: block;
}

.leaf[showMenu=false] .menu {
  display: none;
}

.saveButton {
  float: right;
  background-color: rebeccapurple;
  -webkit-mask: url('../images/save.svg');
  -webkit-mask-size: cover;  
}
.saveButton:active {
  background-color: green;
}

.listenButton {
  margin-left: 5px;
  float: left;
  background-color: green;  
  -webkit-mask: url('../images/listen.svg');
  -webkit-mask-size: cover;
}
.leaf[listen="false"] .listenButton{
  background-color: red;
}


/*.editButton:hover{
  color: green;
  border-color: green;
}
.removeButton:active{
  color: white;
  background: red;
}
.editButton:active{
  color: white;
  background: green;
}*/


.editButton {
	margin-left: 5px;
	float: left;
  background-color: black;  
  -webkit-mask: url('../images/edit.svg');
  -webkit-mask-size: cover;
}

.CodeMirror {
  font-family: monospace !important; /*CodeMirror css overrides this unless I attach codemirror above this, which, maybe I should*/
}
.codemirrorContainer {
  /*overflow: hidden;*/
}
.codemirrorContainer .codeMirror{
  height: Calc(100% - 43px);
  isolation: isolate;
}


.codemirrorContainer .entityHeader{
  position: static;
  top: 0;
  left: 0;
  border: none;
  border-bottom: 1px solid black;
}

.terminal .entityHeader {
  /*Make terminals impervious to leaf headers being hidden*/
  visibility: visible;
	left: 0px;
  top: 0px;
  border: none;
  border-bottom: 1px solid black;

}

.terminal {
  background-color: rgba(255,255,255,1);
  width: 400px;
  height: 250px;
  font-family: monospace;
}
.terminalContainer {
  padding-right: 5px;
  height: 100%;
  overflow-y: scroll;
}


.CodeMirror-focused, div:focus {
  z-index: 10;
  box-shadow: 5px 5px 20px black;
}

.terminal p {
  margin: 0;
  line-height: 1.5em;
}

.terminalContainer > .promptContainer:first-of-type {
  margin-top: 48px;
}
.terminal .fs {
  border: 2px solid transparent;
}
.terminal .fs:hover {
  border: 2px solid lightblue;
}

.terminal::-webkit-scrollbar {
  display: none;
}

.request, .result {
  margin-left: 5px;
	width: 100%;
	line-height: 1.5em;
}

.draggingHappening {
  user-select: none;
}

.fs.directory::before {
  content: '🗁';
}
.fs.text::before {
  content: '🗎';
}
.fs.image::before {
  content: '🖻';
}
